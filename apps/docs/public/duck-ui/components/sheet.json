{
  "name": "sheet",
  "type": "registry:ui",
  "dependencies": [
    "@gentleduck/primitives"
  ],
  "registryDependencies": [
    "dialog"
  ],
  "root_folder": "sheet",
  "files": [
    {
      "path": "sheet/index.ts",
      "content": "export * from './sheet'\nexport * from './sheet.types'\n",
      "type": "registry:ui",
      "target": "components/ui/index.ts"
    },
    {
      "path": "sheet/sheet.tsx",
      "content": "'use client'\n\nimport SheetPrimitive from '@gentleduck/primitives/sheet'\nimport { cn } from '@gentleduck/libs/cn'\nimport { AnimDialogVariants, AnimSheetVariants, AnimVariants } from '@gentleduck/motion/anim'\nimport type { VariantProps } from '@gentleduck/variants'\nimport type React from 'react'\nimport {\n  DialogClose,\n  DialogCloseX,\n  type DialogContentProps,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '../dialog'\nimport { SheetWrapperProps } from './sheet.types'\nimport { Button } from '../button'\n\nfunction Sheet({ closeButton = true, ...props }: React.ComponentPropsWithoutRef<typeof SheetPrimitive.Root>) {\n  return <SheetPrimitive.Root closeButton={closeButton} {...props} />\n}\n\nconst SheetTrigger = DialogTrigger\n\nfunction SheetContent({\n  children,\n  className,\n  renderOnce = false,\n  overlay = 'default',\n  closedby = 'any',\n  side = 'right',\n  ...props\n}: DialogContentProps & VariantProps<typeof AnimSheetVariants>): React.JSX.Element {\n  return (\n    <SheetPrimitive.Content\n      dialogClose={DialogCloseX}\n      className={cn(\n        AnimVariants({ overlay: overlay }),\n        AnimDialogVariants({ animation: 'nothing' }),\n        AnimSheetVariants({ side: side }),\n        className,\n        'overflow-hidden rounded-none',\n      )}\n      {...props}>\n      <div className=\"flex flex-col gap-4\">{children}</div>\n    </SheetPrimitive.Content>\n  )\n}\n\n/**\n * SheetHeader component renders a header section for a sheet.\n * It supports additional class names and props to customize the\n * appearance and behavior of the header. The component uses a\n * flexbox layout to arrange its children in a vertical column\n * and applies responsive text alignment.\n *\n * @param {React.HTMLProps<HTMLDivElement>} props - The properties passed to the component.\n * @param {React.Ref<HTMLDivElement>} [props.ref] - A ref to be forwarded to the component.\n * @param {string} props.className - Additional class names for styling.\n *\n * @returns {React.JSX.Element} The rendered SheetHeader component.\n */\nconst SheetHeader = DialogHeader\n/**\n * SheetFooter component renders a footer section for a sheet.\n * It supports additional class names and props to customize the\n * appearance and behavior of the footer. The component uses a\n * flexbox layout to arrange its children in a column on small\n * screens and in a row with space between items on larger screens.\n *\n * @param {React.HTMLProps<HTMLDivElement>} props - The properties passed to the component.\n * @param {string} props.className - Additional class names for styling.\n * @param {React.Ref<HTMLDivElement>} [props.ref] - Additional class names for styling.\n *\n * @returns {React.JSX.Element} The rendered SheetFooter component.\n */\nconst SheetFooter = DialogFooter\n\n/**\n * `SheetTitle` is a React component that forwards its ref to the `SheetTitle` component.\n * It applies additional class names for styling and accepts all props that `SheetTitle` accepts.\n *\n * @param {React.HTMLProps<HTMLHeadingElement>} props - The properties passed to the component.\n * @param {string} [props.className ] - Additional class names to apply to the component.\n * @param {React.Ref<HTMLHeadingElement>} [props.ref] - A ref to be forwarded to the `SheetTitle` component.\n * @param {React.HTMLProps<HTMLHeadingElement>} [...props] - All other props to be passed to the `SheetTitle` component.\n *\n * @returns {React.JSX.Element} The rendered `SheetTitle` component with forwarded ref and applied class names.\n */\nconst SheetTitle = DialogTitle\n\n/**\n * `SheetDescription` is a React forwardRef component that wraps around `SheetDescription`.\n * It allows you to pass a `ref` and additional props to the `SheetDescription` component.\n *\n * @param {React.HTMLProps<HTMLParagraphElement>} props - The properties passed to the component.\n * @param {string} [props.className] - A className to apply to the component.\n * @param {React.Ref} [props.ref] - A ref to be forwarded to the `SheetPrimitive.Description` component.\n * @param {React.HTMLProps<HTMLParagraphElement>} [..props] - Additional props to be passed to the component.\n *\n * @returns {React.JSX.Element} A `SheetDescription` component with forwarded ref and additional props.\n */\nconst SheetDescription = DialogDescription\n\nconst SheetClose = DialogClose\n\n/**\n * `SheetWrapper` is a React component that wraps a `Sheet` component and renders children elements\n * conditionally based on the screen size. If the screen width is 768px or greater, a `Drawer` is rendered; otherwise,\n * a `Sheet` is rendered.\n * @param {SheetWrapperProps} props - The properties passed to the component.\n * @returns {JSX.Element} The rendered `Drawer` or `Sheet` component.\n */\nfunction SheetWrapper({ trigger, content, duckHook, ...props }: SheetWrapperProps): React.JSX.Element {\n  const { className: subContentClassName, children: subcontentChildren, _header, _footer, ...subContentProps } = content\n  const {\n    className: subHeaderClassName,\n    _description: subDescription,\n    _title: subTitle,\n    ...subHeaderProps\n  } = _header ?? {}\n  const { className: subFooterClassName, _submit: _subSubmit, _cancel: _subCancel, ...subFooterProps } = _footer ?? {}\n\n  return (\n    <Sheet open={duckHook?.state.shape} onOpenChange={duckHook?.handleOpenChange} {...props}>\n      <SheetTrigger {...trigger} />\n      <SheetContent className={cn('flex h-full w-full flex-col', subContentClassName)} {...subContentProps}>\n        <div data-role-wrapper className=\"flex h-full w-full flex-col gap-4\">\n          {_header && (\n            <SheetHeader {...subHeaderProps}>\n              {subHeaderProps.children ? (\n                subHeaderProps.children\n              ) : (\n                <>\n                  <SheetTitle {...subTitle} />\n                  <SheetDescription {...subDescription} />\n                </>\n              )}\n            </SheetHeader>\n          )}\n          {subcontentChildren}\n          <SheetFooter className={cn('gap-2', subFooterClassName)} {...subFooterProps}>\n            <SheetClose asChild>\n              <Button {..._subCancel} className={cn('w-full', _subCancel?.className)} />\n            </SheetClose>\n\n            <Button\n              {..._subSubmit}\n              className={cn('w-full', _subSubmit?.className)}\n              onClick={(e) => {\n                duckHook!.skipAlertOnClose.current = true\n                duckHook?.setState({ shape: false, alert: false })\n                _subSubmit?.onClick?.(e)\n              }}\n            />\n            <div />\n          </SheetFooter>\n        </div>\n      </SheetContent>\n    </Sheet>\n  )\n}\n\nexport {\n  Sheet,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n  SheetWrapper,\n}\n",
      "type": "registry:ui",
      "target": "components/ui/sheet.tsx"
    },
    {
      "path": "sheet/sheet.types.ts",
      "content": "import type * as SheetPrimitive from '@radix-ui/react-dialog'\nimport type { UseDuckAlertReturnType } from '../alert-dialog'\nimport type {\n  SheetClose,\n  SheetContent,\n  SheetDescription,\n  SheetFooter,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from '../sheet'\nimport { Button } from '../button'\n\n/**\n * A wrapper component for the [Radix UI Sheet](https://www.radix-ui.com/docs/primitives/components/sheet)\n */\nexport type SheetWrapperProps = {\n  trigger?: React.ComponentPropsWithoutRef<typeof SheetTrigger>\n  content: Partial<React.ComponentPropsWithoutRef<typeof SheetContent>> & {\n    _header?: React.ComponentPropsWithoutRef<typeof SheetHeader> & {\n      _title?: React.ComponentPropsWithoutRef<typeof SheetTitle>\n      _description?: React.ComponentPropsWithoutRef<typeof SheetDescription>\n    }\n    _footer?: React.ComponentPropsWithoutRef<typeof SheetFooter> & {\n      _cancel?: React.ComponentPropsWithoutRef<typeof Button>\n      _submit?: React.ComponentPropsWithoutRef<typeof Button>\n    }\n  }\n  duckHook?: UseDuckAlertReturnType\n} & React.ComponentPropsWithoutRef<typeof SheetPrimitive.Root>\n",
      "type": "registry:ui",
      "target": "components/ui/sheet.types.ts"
    }
  ],
  "source": "/registry-ui-duckui/src/sheet"
}
