{
  "name": "drawer",
  "type": "registry:ui",
  "dependencies": [],
  "registryDependencies": [],
  "root_folder": "drawer",
  "files": [
    {
      "path": "drawer/drawer.tsx",
      "content": "'use client'\n\nimport * as React from 'react'\nimport { Drawer as DrawerPrimitive } from 'vaul'\n\nimport { DrawerWrapperProps } from './drawer.types'\nimport { cn } from '@gentleduck/libs/cn'\n\nfunction Drawer({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>): React.JSX.Element {\n  return <DrawerPrimitive.Root shouldScaleBackground={shouldScaleBackground} {...props} />\n}\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = ({\n  className,\n  ref,\n  ...props\n}: React.ComponentPropsWithRef<typeof DrawerPrimitive.Overlay>): React.JSX.Element => (\n  <DrawerPrimitive.Overlay ref={ref} className={cn('fixed inset-0 z-50 bg-black/80', className)} {...props} />\n)\n\nfunction DrawerContent({\n  className,\n  children,\n  overlay,\n  ref,\n  ...props\n}: React.ComponentPropsWithRef<typeof DrawerPrimitive.Content> & {\n  overlay?: React.ComponentPropsWithRef<typeof DrawerOverlay>\n}): React.JSX.Element {\n  return (\n    <DrawerPortal>\n      <DrawerOverlay {...overlay} />\n      <DrawerPrimitive.Content\n        ref={ref}\n        className={cn(\n          'fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background',\n          className,\n        )}\n        {...props}>\n        <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n        {children}\n      </DrawerPrimitive.Content>\n    </DrawerPortal>\n  )\n}\n\nfunction DrawerHeader({ className, ...props }: React.HTMLAttributes<HTMLDivElement>): React.JSX.Element {\n  return <div className={cn('grid gap-1.5 p-4 text-center sm:text-left', className)} {...props} />\n}\nDrawerHeader.displayName = 'DrawerHeader'\n\nfunction DrawerFooter({ className, ...props }: React.HTMLAttributes<HTMLDivElement>): React.JSX.Element {\n  return <div className={cn('mt-auto flex flex-col gap-2 p-4', className)} {...props} />\n}\n\nfunction DrawerTitle({\n  className,\n  ref,\n  ...props\n}: React.ComponentPropsWithRef<typeof DrawerPrimitive.Title>): React.JSX.Element {\n  return (\n    <DrawerPrimitive.Title\n      ref={ref}\n      className={cn('font-semibold text-lg leading-none tracking-tight', className)}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerDescription({\n  className,\n  ref,\n  ...props\n}: React.ComponentPropsWithRef<typeof DrawerPrimitive.Description>): React.JSX.Element {\n  return <DrawerPrimitive.Description ref={ref} className={cn('text-muted-foreground text-sm', className)} {...props} />\n}\n\nfunction DrawerWrapper({ trigger, content, duckHook, ...props }: DrawerWrapperProps): React.JSX.Element {\n  const { className: contentClassName, children: contentChildren, _header, _footer, ...contentProps } = content\n  const { className: headerClassName, _description, _title, ...headerProps } = _header ?? {}\n  const { className: footerClassName, _submit: _subSubmit, _cancel: _subCancel, ...footerProps } = _footer ?? {}\n\n  return (\n    <Drawer open={duckHook?.state.shape} onOpenChange={duckHook?.handleOpenChange} {...props}>\n      <DrawerTrigger {...trigger} />\n      <DrawerContent className={cn('flex h-full w-full flex-col', contentClassName)} {...contentProps}>\n        <div data-role-wrapper className=\"flex h-full w-full flex-col gap-4\">\n          {_header && (\n            <DrawerHeader {...headerProps}>\n              {headerProps.children ? (\n                headerProps.children\n              ) : (\n                <>\n                  <DrawerTitle {..._title} />\n                  <DrawerDescription {..._description} />\n                </>\n              )}\n            </DrawerHeader>\n          )}\n          {contentChildren}\n          <DrawerFooter className={cn('items-ceter flex gap-2', footerClassName)} {...footerProps}>\n            <DrawerClose asChild {..._subCancel} />\n            <div\n              {..._subSubmit}\n              className={cn('w-full', _subSubmit?.className)}\n              onClick={(e) => {\n                duckHook?.setState({ shape: false, alert: false })\n                _subSubmit?.onClick?.(e)\n              }}\n            />\n          </DrawerFooter>\n        </div>\n      </DrawerContent>\n    </Drawer>\n  )\n}\nDrawerWrapper.displayName = 'DrawerWrapper'\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n  DrawerWrapper,\n}\n",
      "type": "registry:ui",
      "target": "components/ui/drawer.tsx"
    },
    {
      "path": "drawer/drawer.types.ts",
      "content": "import { Drawer as DrawerPrimitive } from 'vaul'\nimport {\n  DrawerClose,\n  DrawerContent,\n  DrawerDescription,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger,\n} from './drawer'\nimport { UseDuckAlertReturnType } from '../alert-dialog'\n\n/**\n * DrawerWrapperProps\n */\nexport type DrawerWrapperProps = {\n  trigger?: React.ComponentPropsWithoutRef<typeof DrawerTrigger>\n  content: Partial<React.ComponentPropsWithoutRef<typeof DrawerContent>> & {\n    _header?: React.ComponentPropsWithoutRef<typeof DrawerHeader> & {\n      _title?: React.ComponentPropsWithoutRef<typeof DrawerTitle>\n      _description?: React.ComponentPropsWithoutRef<typeof DrawerDescription>\n    }\n    _footer?: React.ComponentPropsWithoutRef<typeof DrawerFooter> & {\n      _cancel?: React.ComponentPropsWithoutRef<typeof DrawerClose>\n      _submit?: React.HTMLProps<HTMLDivElement>\n    }\n  }\n  duckHook?: UseDuckAlertReturnType\n} & React.ComponentProps<typeof DrawerPrimitive.Root>\n",
      "type": "registry:ui",
      "target": "components/ui/drawer.types.ts"
    },
    {
      "path": "drawer/index.ts",
      "content": "export * from './drawer'\nexport * from './drawer.types'\n",
      "type": "registry:ui",
      "target": "components/ui/index.ts"
    }
  ],
  "source": "/registry-ui-duckui/src/drawer"
}