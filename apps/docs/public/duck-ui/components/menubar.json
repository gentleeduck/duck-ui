{
  "name": "menubar",
  "type": "registry:ui",
  "registryDependencies": [],
  "root_folder": "menubar",
  "files": [
    {
      "path": "menubar/_menubar.tsx",
      "content": "",
      "type": "registry:ui",
      "target": "components/ui/_menubar.tsx"
    },
    {
      "path": "menubar/index.ts",
      "content": "export * from './menubar'\n",
      "type": "registry:ui",
      "target": "components/ui/index.ts"
    },
    {
      "path": "menubar/menubar.tsx",
      "content": "'use client'\n\nimport { cn } from '@gentleduck/libs/cn'\nimport * as React from 'react'\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n} from '../dropdown-menu'\n\nexport type MenubarContextType = {}\nconst menubarContext = React.createContext<MenubarContextType | null>(null)\n\nfunction Menubar({ children, className, ...props }: React.HTMLProps<HTMLDivElement>) {\n  const wrapperRef = React.useRef<HTMLDivElement | null>(null)\n  const triggersRef = React.useRef<HTMLButtonElement[]>([])\n  const contentsRef = React.useRef<HTMLDialogElement[]>([])\n  const selectedItemRef = React.useRef<HTMLButtonElement | null>(null)\n  const clickedItemRef = React.useRef<HTMLButtonElement | null>(null)\n\n  React.useEffect(() => {\n    const triggers = Array.from(\n      wrapperRef.current?.querySelectorAll('[duck-menubar-trigger]') as never as HTMLButtonElement[],\n    )\n    const contents = Array.from(\n      wrapperRef.current?.querySelectorAll('[duck-menubar-content]') as never as HTMLDialogElement[],\n    )\n    triggersRef.current = triggers\n    contentsRef.current = contents\n\n    wrapperRef.current?.addEventListener('keydown', (e) => {\n      if (e.key === 'ArrowRight' || e.key === 'ArrowLeft') {\n        e.preventDefault()\n        const currentIndex = triggers.indexOf(selectedItemRef.current as HTMLButtonElement)\n\n        if (e.key === 'ArrowRight') {\n          const nextIndex = currentIndex + 1\n          selectedItemRef.current = nextIndex < triggers.length ? triggers[nextIndex]! : triggers[0]!\n          clickedItemRef.current && selectedItemRef.current?.click()\n        } else if (e.key === 'ArrowLeft') {\n          const nextIndex = currentIndex - 1\n          selectedItemRef.current = nextIndex >= 0 ? triggers[nextIndex]! : triggers[triggers.length - 1]!\n          clickedItemRef.current && selectedItemRef.current?.click()\n        }\n\n        console.log(selectedItemRef.current)\n        for (let i = 0; i < triggers.length; i++) {\n          const trigger = triggers[i] as HTMLButtonElement\n          trigger.setAttribute('data-open', 'false')\n\n          if (trigger === selectedItemRef.current) {\n            trigger.setAttribute('data-open', 'true')\n            setTimeout(() => trigger.focus(), 10)\n          }\n        }\n      }\n\n      // if (e.key === 'Enter') {\n      //   selectedItemRef.current?.click()\n      // }\n    })\n\n    for (let i = 0; i < triggers.length; i++) {\n      const trigger = triggers[i] as HTMLButtonElement\n      const content = contents[i] as HTMLDialogElement\n\n      trigger.addEventListener('focus', () => {\n        if (!clickedItemRef.current && !selectedItemRef.current) {\n          trigger.setAttribute('data-open', 'true')\n          selectedItemRef.current = trigger\n        }\n      })\n\n      trigger.addEventListener('click', () => {\n        const state = trigger.getAttribute('data-open')\n        for (let i = 0; i < triggers.length; i++) {\n          const trigger = triggers[i] as HTMLButtonElement\n          trigger.setAttribute('data-open', 'false')\n        }\n        clickedItemRef.current = trigger\n        selectedItemRef.current = trigger\n        trigger.setAttribute('data-open', String(!state))\n      })\n\n      trigger.addEventListener('keydown', (e) => {\n        if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {\n          console.log('hi')\n          e.preventDefault()\n          content.focus()\n        }\n      })\n\n      //\n      //   trigger.addEventListener('mouseenter', () => {\n      //     if (\n      //       clickedItemRef.current &&\n      //       trigger.getAttribute('data-open') === 'false' &&\n      //       trigger !== clickedItemRef.current\n      //     ) {\n      //       for (let i = 0; i < triggers.length; i++) {\n      //         const trigger = triggers[i] as HTMLButtonElement\n      //         trigger.setAttribute('data-open', 'false')\n      //       }\n      //       selectedItemRef.current = trigger\n      //       selectedItemRef.current?.click()\n      //       selectedItemRef.current.setAttribute('data-open', 'true')\n      //     }\n      //   })\n      //\n      //   // reset the open state when the mouse leaves\n      //   wrapperRef.current?.addEventListener('mouseleave', () => {\n      //     selectedItemRef.current = null\n      //     clickedItemRef.current = null\n      //   })\n      //\n      //   // clean the items that are not open\n      //   let toggle: boolean = false\n      //   content.addEventListener('toggle', () => {\n      //     if (toggle) {\n      //       for (let i = 0; i < triggers.length; i++) {\n      //         triggers[i]?.setAttribute('data-open', 'false')\n      //       }\n      //     }\n      //     toggle = !toggle\n      //   })\n    }\n  }, [])\n\n  return (\n    <menubarContext.Provider value={{}}>\n      <div\n        className={cn('flex items-center rounded-lg border p-1', className)}\n        {...props}\n        ref={wrapperRef}\n        duck-menubar=\"\">\n        {children}\n      </div>\n    </menubarContext.Provider>\n  )\n}\n\nfunction MenubarMenu({ children, ...props }: React.HTMLProps<HTMLDivElement>) {\n  return (\n    <DropdownMenu {...props} duck-menubar-menu=\"\">\n      <div {...props}>{children}</div>\n    </DropdownMenu>\n  )\n}\n\nfunction MenubarTrigger({\n  children,\n  className,\n  variant = 'ghost',\n  ...props\n}: React.ComponentPropsWithRef<typeof DropdownMenuTrigger>) {\n  return (\n    <DropdownMenuTrigger\n      variant={variant}\n      className={cn(\n        'data-[open=\"true\"]:bg-secondary',\n        // 'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-transparent',\n        className,\n      )}\n      {...props}\n      duck-menubar-trigger=\"\">\n      {children}\n    </DropdownMenuTrigger>\n  )\n}\n\nfunction MenubarContent({ ...props }: React.ComponentPropsWithRef<typeof DropdownMenuContent>) {\n  return <DropdownMenuContent {...props} className=\"max-w-[250px]\" duck-menubar-content=\"\" />\n}\n\nfunction MenubarItem({ ...props }: React.ComponentPropsWithRef<typeof DropdownMenuItem>) {\n  return <DropdownMenuItem {...props} duck-menubar-item=\"\" />\n}\n\nfunction MenubarSeparator({ ...props }: React.ComponentPropsWithRef<typeof DropdownMenuSeparator>) {\n  return <DropdownMenuSeparator {...props} duck-menubar-separator=\"\" />\n}\n\nfunction MenubarLabel({ ...props }: React.ComponentPropsWithRef<typeof DropdownMenuLabel>) {\n  return <DropdownMenuLabel {...props} duck-menubar-label=\"\" />\n}\n\nfunction MenubarCheckboxItem({ ...props }: React.ComponentPropsWithRef<typeof DropdownMenuCheckboxItem>) {\n  return <DropdownMenuCheckboxItem {...props} duck-menubar-checkbox-item=\"\" />\n}\n\nfunction MenubarRadioGroup({ ...props }: React.ComponentPropsWithRef<typeof DropdownMenuRadioGroup>) {\n  return <DropdownMenuRadioGroup {...props} duck-menubar-radio-group=\"\" />\n}\n\nfunction MenubarRadioItem({ ...props }: React.ComponentPropsWithRef<typeof DropdownMenuRadioItem>) {\n  return <DropdownMenuRadioItem {...props} duck-menubar-radio-item=\"\" />\n}\n\nfunction MenubarSubContent({ ...props }: React.ComponentPropsWithRef<typeof DropdownMenuSubContent>) {\n  return <DropdownMenuSubContent {...props} duck-menubar-sub-content=\"\" />\n}\n\nfunction MenubarSubTrigger({ ...props }: React.ComponentPropsWithRef<typeof DropdownMenuSubTrigger>) {\n  return <DropdownMenuSubTrigger {...props} duck-menubar-sub-trigger=\"\" />\n}\n\nfunction MenubarGroup({ ...props }: React.ComponentPropsWithRef<typeof DropdownMenuGroup>) {\n  return <DropdownMenuGroup {...props} duck-menubar-group=\"\" />\n}\n\nfunction MenubarSub({ ...props }: React.ComponentPropsWithRef<typeof DropdownMenuSub>) {\n  return <DropdownMenuSub {...props} duck-menubar-sub=\"\" />\n}\n\nfunction MenubarShortcut({ ...props }: React.ComponentPropsWithRef<typeof DropdownMenuShortcut>) {\n  return <DropdownMenuShortcut {...props} duck-menubar-shortcut=\"\" />\n}\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n",
      "type": "registry:ui",
      "target": "components/ui/menubar.tsx"
    }
  ],
  "source": "/registry-ui-duckui/src/menubar"
}