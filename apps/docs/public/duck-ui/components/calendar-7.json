{
  "name": "calendar-7",
  "type": "registry:example",
  "registryDependencies": [
    "calendar"
  ],
  "root_folder": "calendar",
  "files": [
    {
      "path": "calendar/calendar-7.tsx",
      "content": "'use client'\n\nimport { Button } from '@gentleduck/registry-ui-duckui/button'\nimport { Calendar } from '@gentleduck/registry-ui-duckui/calendar'\nimport { Input } from '@gentleduck/registry-ui-duckui/input'\nimport { Label } from '@gentleduck/registry-ui-duckui/label'\nimport { Popover, PopoverContent, PopoverTrigger } from '@gentleduck/registry-ui-duckui/popover'\nimport { CalendarIcon } from 'lucide-react'\nimport * as React from 'react'\n\nfunction formatDate(date: Date | undefined) {\n  if (!date) {\n    return ''\n  }\n\n  return date.toLocaleDateString('en-US', {\n    day: '2-digit',\n    month: 'long',\n    year: 'numeric',\n  })\n}\n\nexport default function CalendarDemo() {\n  const [open, setOpen] = React.useState(false)\n  const [value, setValue] = React.useState('In 2 days')\n  const [date, setDate] = React.useState<Date | undefined>(parseDate(value) || undefined)\n  const [month, setMonth] = React.useState<Date | undefined>(date)\n\n  return (\n    <div className=\"flex flex-col gap-3\">\n      <Label htmlFor=\"date\" className=\"px-1\">\n        Schedule Date\n      </Label>\n      <div className=\"relative flex gap-2\">\n        <Input\n          id=\"date\"\n          value={value}\n          placeholder=\"Tomorrow or next week\"\n          className=\"bg-background pr-10\"\n          onChange={(e) => {\n            setValue(e.currentTarget.value)\n            const date = parseDate(e.currentTarget.value)\n            if (date) {\n              setDate(date)\n              setMonth(date)\n            }\n          }}\n          onKeyDown={(e) => {\n            if (e.key === 'ArrowDown') {\n              e.preventDefault()\n              setOpen(true)\n            }\n          }}\n        />\n        <Popover open={open} onOpenChange={setOpen}>\n          <PopoverTrigger asChild>\n            <Button id=\"date-picker\" variant=\"ghost\" className=\"absolute top-1/2 right-2 size-6 -translate-y-1/2\">\n              <CalendarIcon className=\"size-3.5\" />\n              <span className=\"sr-only\">Select date</span>\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-auto overflow-hidden p-0\" align=\"end\">\n            <Calendar\n              mode=\"single\"\n              selected={date}\n              captionLayout=\"dropdown\"\n              month={month}\n              onMonthChange={setMonth}\n              onSelect={(date) => {\n                setDate(date)\n                setValue(formatDate(date))\n                setOpen(false)\n              }}\n            />\n          </PopoverContent>\n        </Popover>\n      </div>\n      <div className=\"px-1 text-muted-foreground text-sm\">\n        Your post will be published on <span className=\"font-medium\">{formatDate(date)}</span>.\n      </div>\n    </div>\n  )\n}\nfunction parseDate(input: string): Date | null {\n  const now = new Date()\n  const normalized = input.trim().toLowerCase()\n\n  if (normalized === 'today') return now\n\n  if (normalized === 'tomorrow') {\n    const date = new Date(now)\n    date.setDate(now.getDate() + 1)\n    return date\n  }\n\n  if (normalized === 'next week') {\n    const date = new Date(now)\n    date.setDate(now.getDate() + 7)\n    return date\n  }\n\n  const inXDaysMatch = normalized.match(/^in (\\d+) days?$/)\n  if (inXDaysMatch) {\n    const days = parseInt(inXDaysMatch[1]!, 10)\n    if (!isNaN(days)) {\n      const date = new Date(now)\n      date.setDate(now.getDate() + days)\n      return date\n    }\n  }\n\n  // Try to parse as a natural date string (like \"August 10, 2025\")\n  const parsed = new Date(input)\n  if (!isNaN(parsed.getTime())) {\n    return parsed\n  }\n\n  return null\n}\n",
      "type": "registry:example",
      "target": "components/calendar-7.tsx"
    }
  ],
  "source": "/registry-examples-duckui/src/calendar"
}