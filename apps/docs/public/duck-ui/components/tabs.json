{
  "name": "tabs",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-tabs"
  ],
  "registryDependencies": [],
  "root_folder": "tabs",
  "files": [
    {
      "path": "tabs/index.ts",
      "content": "export * from './tabs'\n",
      "type": "registry:ui",
      "target": "components/ui/index.ts"
    },
    {
      "path": "tabs/tabs.tsx",
      "content": "'use client'\n\nimport { cn } from '@gentleduck/libs/cn'\nimport * as React from 'react'\n\nexport function useTabs() {\n  const context = React.useContext(TabsContext)\n  if (context === null) {\n    throw new Error('useTabs must be used within a TabsList')\n  }\n  return context\n}\n\nexport interface TabsContextProps {\n  activeItem: string\n  setActiveItem: React.Dispatch<React.SetStateAction<string>>\n}\n\nconst TabsContext = React.createContext<TabsContextProps | null>(null)\n\nexport interface TabsProps extends React.HTMLProps<HTMLDivElement> {\n  listValues: string[]\n}\n\n// TODO: add the orientation for horizontal\nfunction Tabs({ listValues, ...props }: TabsProps) {\n  if (!listValues) throw Error('listValues is required')\n  const [activeItem, setActiveItem] = React.useState<string>(listValues[0] ?? '')\n  return (\n    <TabsContext.Provider value={{ activeItem, setActiveItem }}>\n      <div {...props} duck-tabs=\"\" role=\"tablist\" aria-orientation=\"vertical\" />\n    </TabsContext.Provider>\n  )\n}\n\nexport interface TabsListProps extends React.HTMLProps<HTMLUListElement> {}\nconst TabsList = ({ className, ref, ...props }: TabsListProps) => (\n  <ul\n    ref={ref}\n    role=\"tablist\"\n    className={cn(\n      'inline-flex items-center justify-center gap-2 rounded-md bg-muted p-1 text-muted-foreground',\n      className,\n    )}\n    {...props}\n    duck-tabs-list=\"\"\n  />\n)\n\nexport interface TabsTriggerProps extends React.HTMLProps<HTMLLIElement> {\n  value: string\n  defaultChecked?: boolean\n}\n\nconst TabsTrigger = ({ className, children, defaultChecked, onClick, value, ref, ...props }: TabsTriggerProps) => {\n  const { setActiveItem, activeItem } = useTabs()\n  const isActive = value === activeItem\n\n  return (\n    <li\n      ref={ref}\n      data-value={value}\n      aria-selected={isActive}\n      role=\"tab\"\n      id={`tab-${value}`}\n      aria-controls={`panel-${value}`}\n      tabIndex={isActive ? 0 : -1}\n      className={cn(\n        'relative inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 font-medium text-sm ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 has-checked:bg-background has-checked:text-foreground has-checked:shadow',\n        className,\n      )}\n      {...props}\n      duck-tabs-trigger=\"\">\n      <input\n        id={value}\n        type=\"radio\"\n        name=\"tab\"\n        value={value}\n        className=\"absolute inset-0 appearance-none\"\n        onChange={() => setActiveItem(value)}\n        checked={isActive}\n        defaultChecked={defaultChecked}\n        aria-hidden\n      />\n      <label htmlFor={value}>{children}</label>\n    </li>\n  )\n}\n\nexport interface TabsContentProps extends React.HTMLProps<HTMLDivElement> {\n  value: string\n}\n\nconst TabsContent = ({ className, value, ref, ...props }: TabsContentProps) => {\n  const { activeItem } = useTabs()\n  const [shouldRender, setShouldRender] = React.useState(false)\n\n  // TODO: use the RenderOnce Component.\n  React.useEffect(() => {\n    if (activeItem === value) setShouldRender(true)\n  }, [activeItem])\n\n  return shouldRender ? (\n    <div\n      ref={ref}\n      data-value={value}\n      id={`panel-${value}`}\n      role=\"tabpanel\"\n      aria-labelledby={`tab-${value}`}\n      tabIndex={0}\n      hidden={activeItem !== value}\n      className={cn(\n        'mt-2 list-none ring-offset-background focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',\n        activeItem === value ? 'block' : 'hidden',\n        className,\n      )}\n      {...props}\n      duck-tabs-content=\"\"\n    />\n  ) : null\n}\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n",
      "type": "registry:ui",
      "target": "components/ui/tabs.tsx"
    }
  ],
  "source": "/registry-ui-duckui/src/tabs"
}