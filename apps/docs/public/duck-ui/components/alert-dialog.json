{
  "name": "alert-dialog",
  "type": "registry:ui",
  "dependencies": [],
  "registryDependencies": [],
  "root_folder": "alert-dialog",
  "files": [
    {
      "path": "alert-dialog/alert-dialog.hook.ts",
      "content": "import React from 'react'\nimport type { StateType, UseDuckAlertReturnType, UserDuckAlertProps } from './alert-dialog.types'\n\n/**\n * Custom hook to manage the state and behavior of an alert dialog with a drawer.\n *\n * @param {Object} props - The properties for the alert dialog.\n * @param {Object} props.actions - Contains optional cancel and continue actions.\n * @param {Function} [props.actions.cancel] - Callback to execute when the alert is canceled.\n * @param {Function} [props.actions.continue] - Callback to execute when the alert is continued.\n * @param {boolean} props.state - Initial state indicating whether to show the alert.\n *\n * @returns {UseDuckAlertReturnType} An object containing handlers and state management utilities:\n *\n */\nexport function useDuckAlert<T>({ state: changeState }: UserDuckAlertProps<T>): UseDuckAlertReturnType {\n  const [state, setState] = React.useState<StateType>({ shape: false, alert: false })\n  const changeStateRef = React.useRef<typeof changeState | null>(null)\n\n  React.useEffect(() => {\n    changeStateRef.current = changeState\n  }, [])\n\n  const handleAlertCancel = React.useCallback(() => {\n    setState((prevState) => ({ ...prevState, alert: false, shape: true }))\n  }, [])\n\n  const handleAlertContinue = React.useCallback(() => {\n    setState((prevState) => ({ ...prevState, alert: false, shape: false }))\n  }, [])\n\n  const handleOpenChange = React.useCallback(\n    (drawerState: boolean) => {\n      const showAlert = !drawerState && (changeState || true) && changeStateRef.current !== changeState\n\n      setState(() => ({\n        alert: showAlert as boolean,\n        shape: changeState || true ? drawerState : false,\n      }))\n    },\n    [changeState],\n  )\n\n  return {\n    handleAlertCancel,\n    handleAlertContinue,\n    handleOpenChange,\n    state,\n    setState,\n  }\n}\n",
      "type": "registry:ui",
      "target": "components/ui/alert-dialog.hook.ts"
    },
    {
      "path": "alert-dialog/alert-dialog.tsx",
      "content": "'use client'\n\nimport DialogPrimitive from '@gentleduck/aria-feather/dialog'\n// import {\n//   AlertDialogDialogProps,\n//   AlertDialogDrawerProps,\n//   AlertDialogSheetProps,\n//   AlertDialogWrapperType,\n// } from './alert-dialog.types'\nimport type React from 'react'\nimport {\n  DialogContent,\n  type DialogContentProps,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '../dialog'\nimport { cn } from '@gentleduck/libs/cn'\n\nconst AlertDialog = DialogPrimitive.Root\n\nconst AlertDialogTrigger = DialogTrigger\n\nfunction AlertDialogContent({ className, children, ...props }: DialogContentProps): React.JSX.Element {\n  return (\n    <DialogContent closedby=\"closerequest\" {...props}>\n      {children}\n    </DialogContent>\n  )\n}\n\nconst AlertDialogHeader = DialogHeader\n\n/**\n * A component that renders the footer of an alert dialog.\n *\n * It uses a flexbox layout to arrange its children in a vertical column\n * on small screens and in a row with space between items on larger screens.\n *\n */\nconst AlertDialogFooter = DialogFooter\n\n/**\n * `AlertDialogTitle` is a React component that forwards its ref to the `AlertDialogTitle` component.\n * It accepts all props that `AlertDialogTitle` accepts, along with an optional `className` prop\n * to customize its styling.\n *\n */\nconst AlertDialogTitle = DialogTitle\n\n/**\n * `AlertDialogDescription` is a React component that forwards its ref to the `AlertDialogPrimitive.Description` component.\n * It accepts all props that `AlertDialogPrimitive.Description` accepts, along with an optional `className` prop for additional styling.\n *\n */\nconst AlertDialogDescription = DialogDescription\n\n/**\n * `AlertDialogAction` is a React component that forwards its ref to the `AlertDialogPrimitive.Action` component.\n * It accepts all the props of `AlertDialogPrimitive.Action` and an additional `className` prop for custom styling.\n *\n */\nconst AlertDialogAction = AlertDialogTrigger\n\n/**\n * `AlertDialogCancel` is a React forward reference component that renders a cancel button\n * for an alert dialog using `AlertDialogPrimitive.Cancel`. It accepts all props that a\n * `AlertDialogPrimitive.Cancel` component would accept, along with an optional `className`\n * for additional styling.\n *\n */\nconst AlertDialogCancel = AlertDialogTrigger\n\n// TODO: Fix this\n//\n// /**\n//  * Renders an alert dialog and a sheet component, managing their open states\n//  * and handling user interactions through provided callbacks.\n//  *\n//  * @param {AlertDialogWrapperType} props - The properties for configuring the AlertDialogWrapper.\n//  *\n//  * The component utilizes the `useDuckAlert` hook for managing its internal state\n//  * and provides a structured layout for displaying an alert dialog with a trigger,\n//  * content, header, footer, and actions, as well as a sheet with nested content\n//  * and customizable headers and footers. The component handles user interactions\n//  * with cancel and continue actions, updating the state and invoking provided callbacks.\n//  */\n// export function AlertDialogWrapper({\n//   alertTrigger,\n//   alertContent,\n//   duckHook,\n// }: AlertDialogWrapperType) {\n//   const { _header, _footer, ...contentProps } = alertContent ?? {}\n//   const { _title, _description, ...headerProps } = _header ?? {}\n//   const { _submit, _cancel, ...footerProps } = _footer ?? {}\n\n//   return (\n//     <AlertDialog open={duckHook?.state.alert}>\n//       <AlertDialogTrigger\n//         {...alertTrigger}\n//         onClick={(e) => {\n//           duckHook?.setState({ shape: true, alert: false })\n//           alertTrigger?.onClick?.(e)\n//         }}\n//       />\n//       <AlertDialogContent {...contentProps}>\n//         <AlertDialogHeader {...headerProps}>\n//           {headerProps.children ? (\n//             headerProps.children\n//           ) : (\n//             <>\n//               <AlertDialogTitle {..._title} />\n//               <AlertDialogDescription {..._description} />\n//             </>\n//           )}\n//         </AlertDialogHeader>\n\n//         <AlertDialogFooter {...footerProps}>\n//           <AlertDialogCancel\n//             {..._cancel}\n//             onClick={(e) => {\n//               duckHook?.handleAlertCancel()\n//               _cancel?.onClick?.(e)\n//             }}\n//             asChild\n//           >\n//             {_cancel?.children ?? 'Cancel'}\n//           </AlertDialogCancel>\n//           <AlertDialogAction\n//             {..._submit}\n//             onClick={(e) => {\n//               duckHook?.handleAlertContinue()\n//               _submit?.onClick?.(e)\n//             }}\n//             asChild\n//           >\n//             {_submit?.children ?? 'Continue'}\n//           </AlertDialogAction>\n//         </AlertDialogFooter>\n//       </AlertDialogContent>\n//     </AlertDialog>\n//   )\n// }\n\n// /**\n//  * AlertDialogSheet is a component that provides a structured layout for displaying\n//  * an alert dialog with a trigger, content, header, footer, and actions, as well as\n//  * a sheet with nested content and customizable headers and footers. The component\n//  * handles user interactions with cancel and continue actions, updating the state\n//  * and invoking provided callbacks.\n//  *\n//  * @param {AlertDialogSheetProps} props - The properties for configuring the AlertDialogSheet.\n//  *\n//  * The component utilizes the `useDuckAlert` hook for managing its internal state\n//  * and provides a structured layout for displaying an alert dialog with a trigger,\n//  * content, header, footer, and actions, as well as a sheet with nested content\n//  * and customizable headers and footers. The component handles user interactions\n//  * with cancel and continue actions, updating the state and invoking provided callbacks.\n//  */\n// function AlertDialogSheet<T = string>({\n//   alertTrigger,\n//   alertContent,\n//   content,\n//   state,\n// }: AlertDialogSheetProps<T>) {\n//   const duckHook = useDuckAlert({ state })\n\n//   return (\n//     <>\n//       <AlertDialogWrapper\n//         alertTrigger={alertTrigger}\n//         alertContent={alertContent}\n//         duckHook={duckHook}\n//       />\n//       <SheetWrapper content={content} duckHook={duckHook} />\n//     </>\n//   )\n// }\n\n// AlertDialogSheet.displayName = 'AlertDialogSheet'\n\n// /**\n//  * AlertDialogDrawer is a component that provides a structured layout for displaying\n//  * an alert dialog with a trigger, content, header, footer, and actions, as well as\n//  * a drawer with nested content and customizable headers and footers. The component\n//  * handles user interactions with cancel and continue actions, updating the state\n//  * and invoking provided callbacks.\n//  *\n//  * @param {AlertDialogDrawerProps} props - The properties for configuring the AlertDialogDrawer.\n//  *\n//  * The component utilizes the `useDuckAlert` hook for managing its internal state\n//  * and provides a structured layout for displaying an alert dialog with a trigger,\n//  * content, header, footer, and actions, as well as a drawer with nested content\n//  * and customizable headers and footers. The component handles user interactions\n//  * with cancel and continue actions, updating the state and invoking provided callbacks.\n//  */\n\n// function AlertDialogDrawer<T = string>({\n//   alertTrigger,\n//   alertContent,\n//   // content,\n//   state,\n// }: AlertDialogDrawerProps<T>) {\n//   const duckHook = useDuckAlert<T>({ state })\n\n//   return (\n//     <>\n//       <AlertDialogWrapper\n//         alertTrigger={alertTrigger}\n//         alertContent={alertContent}\n//         duckHook={duckHook}\n//       />\n//     </>\n//     // <DrawerWrapper content={content} duckHook={duckHook} />\n//   )\n// }\n\n// AlertDialogSheet.displayName = 'AlertDialogDrawer'\n\n// /**\n//  * Renders an alert dialog and a dialog component, managing their open states\n//  * and handling user interactions through provided callbacks.\n//  *\n//  * @template T\n//  * @param {AlertDialogDialogProps} props - The properties for configuring the AlertDialogDialog.\n//  *\n//  * The component utilizes the `useDuckAlert` hook for managing its internal state\n//  * and provides a structured layout for displaying an alert dialog with a trigger,\n//  * content, header, footer, and actions, as well as a dialog with nested content\n//  * and customizable headers and footers. The component handles user interactions\n//  * with cancel and continue actions, updating the state and invoking provided callbacks.\n//  */\n\n// function AlertDialogDialog<T = string>({\n//   alertTrigger,\n//   alertContent,\n//   // content,\n//   state,\n// }: AlertDialogDialogProps<T>) {\n//   const duckHook = useDuckAlert<T>({ state })\n\n//   return (\n//     <>\n//       <AlertDialogWrapper\n//         alertTrigger={alertTrigger}\n//         alertContent={alertContent}\n//         duckHook={duckHook}\n//       />\n//       {/* ! FIX: create DialogWrapper  */}\n//       {/* <DialogWrapper content={content} duckHook={duckHook} /> */}\n//     </>\n//   )\n// }\n\n// AlertDialogSheet.displayName = 'AlertDialogDialog'\n\nexport {\n  AlertDialog,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogTrigger,\n  AlertDialogDescription,\n  // AlertDialogSheet,\n  // AlertDialogDrawer,\n  // AlertDialogDialog,\n}\n",
      "type": "registry:ui",
      "target": "components/ui/alert-dialog.tsx"
    },
    {
      "path": "alert-dialog/alert-dialog.types.ts",
      "content": "import type { DialogWrapperProps } from '../dialog'\nimport type { DrawerWrapperProps } from './../drawer/drawer.types'\nimport type { SheetWrapperProps } from '../sheet'\nimport type {\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from './alert-dialog'\n\n/**\n * Alert Dialog State\n */\nexport interface StateType {\n  shape: boolean\n  alert: boolean\n}\n\n/**\n * UseDuckAlertReturnType\n */\nexport type UseDuckAlertReturnType = {\n  handleAlertCancel: () => void\n  handleAlertContinue: () => void\n  handleOpenChange: (drawerState: boolean) => void\n  state: StateType\n  setState: React.Dispatch<React.SetStateAction<StateType>>\n}\n\n/**\n * UserDuckAlertProps\n */\nexport type UserDuckAlertProps<T> = Pick<AlertDialogSheetProps<T>, 'state'>\n\nexport type AlertDialogWrapperType = {\n  alertTrigger: React.ComponentPropsWithoutRef<typeof AlertDialogTrigger>\n  alertContent: React.ComponentPropsWithoutRef<typeof AlertDialogContent> & {\n    /**\n     * Header you will use this for nothing\n     */\n    _header?: React.ComponentPropsWithoutRef<typeof AlertDialogHeader> & {\n      _title?: React.ComponentPropsWithoutRef<typeof AlertDialogTitle>\n      _description?: React.ComponentPropsWithoutRef<typeof AlertDialogDescription>\n    }\n    _footer?: React.ComponentPropsWithoutRef<typeof AlertDialogFooter> & {\n      _cancel?: React.ComponentPropsWithoutRef<typeof AlertDialogCancel>\n      _submit?: React.ComponentPropsWithoutRef<typeof AlertDialogAction>\n    }\n  }\n  duckHook?: UseDuckAlertReturnType\n}\n\n/**\n * AlertDialogSheetProps\n */\nexport type AlertDialogSheetProps<T = string> = {\n  state: T\n  content: SheetWrapperProps['content']\n} & AlertDialogWrapperType\n\n/**\n * AlertDialogDrawerProps\n */\nexport type AlertDialogDrawerProps<T = string> = {\n  state: T\n  content: DrawerWrapperProps['content']\n} & AlertDialogWrapperType\n\n/**\n * AlertDialogDialogProps\n */\nexport type AlertDialogDialogProps<T = string> = {\n  state: T\n  content: DialogWrapperProps['content']\n} & AlertDialogWrapperType\n",
      "type": "registry:ui",
      "target": "components/ui/alert-dialog.types.ts"
    },
    {
      "path": "alert-dialog/index.ts",
      "content": "export * from './alert-dialog'\nexport * from './alert-dialog.hook'\nexport * from './alert-dialog.types'\n",
      "type": "registry:ui",
      "target": "components/ui/index.ts"
    }
  ],
  "source": "/registry-ui-duckui/src/alert-dialog"
}