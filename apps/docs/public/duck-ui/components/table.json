{
  "name": "table",
  "type": "registry:ui",
  "dependencies": [],
  "registryDependencies": [
    "combobox",
    "input",
    "pagination",
    "scroll-area",
    "dropdown",
    "command",
    "button",
    "checkbox",
    "badge",
    "context-menu",
    "tooltip"
  ],
  "root_folder": "table",
  "files": [
    {
      "path": "table/index.ts",
      "content": "export * from './table'\nexport * from './table.atom'\nexport * from './table.libs'\nexport * from './table-advanced'\nexport * from './table-example'\n",
      "type": "registry:ui",
      "target": "components/ui/index.ts"
    },
    {
      "path": "table/table-advanced.chunks.tsx",
      "content": "",
      "type": "registry:ui",
      "target": "components/ui/table-advanced.chunks.tsx"
    },
    {
      "path": "table/table-advanced.tsx",
      "content": "",
      "type": "registry:ui",
      "target": "components/ui/table-advanced.tsx"
    },
    {
      "path": "table/table-example.tsx",
      "content": "",
      "type": "registry:ui",
      "target": "components/ui/table-example.tsx"
    },
    {
      "path": "table/table.atom.tsx",
      "content": "",
      "type": "registry:ui",
      "target": "components/ui/table.atom.tsx"
    },
    {
      "path": "table/table.constants.ts",
      "content": "",
      "type": "registry:ui",
      "target": "components/ui/table.constants.ts"
    },
    {
      "path": "table/table.libs.ts",
      "content": "",
      "type": "registry:ui",
      "target": "components/ui/table.libs.ts"
    },
    {
      "path": "table/table.tsx",
      "content": "'use client'\n\nimport { cn } from '@gentleduck/libs/cn'\nimport * as React from 'react'\n\nfunction Table({ className, ...props }: React.ComponentProps<'table'>) {\n  return (\n    <div data-slot=\"table-container\" className=\"relative w-full overflow-hidden\">\n      <table data-slot=\"table\" className={cn('w-full caption-bottom text-sm', className)} {...props} />\n    </div>\n  )\n}\n\nfunction TableHeader({ className, ...props }: React.ComponentProps<'thead'>) {\n  return <thead data-slot=\"table-header\" className={cn('[&_tr]:border-b', className)} {...props} />\n}\n\nfunction TableBody({ className, ...props }: React.ComponentProps<'tbody'>) {\n  return <tbody data-slot=\"table-body\" className={cn('[&_tr:last-child]:border-0', className)} {...props} />\n}\n\nfunction TableFooter({ className, ...props }: React.ComponentProps<'tfoot'>) {\n  return (\n    <tfoot\n      data-slot=\"table-footer\"\n      className={cn('bg-muted/50 border-t font-medium [&>tr]:last:border-b-0', className)}\n      {...props}\n    />\n  )\n}\n\nfunction TableRow({ className, ...props }: React.ComponentProps<'tr'>) {\n  return (\n    <tr\n      data-slot=\"table-row\"\n      className={cn('hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors', className)}\n      {...props}\n    />\n  )\n}\n\nfunction TableHead({ className, ...props }: React.ComponentProps<'th'>) {\n  return (\n    <th\n      data-slot=\"table-head\"\n      className={cn(\n        'text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableCell({ className, ...props }: React.ComponentProps<'td'>) {\n  return (\n    <td\n      data-slot=\"table-cell\"\n      className={cn(\n        'p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableCaption({ className, ...props }: React.ComponentProps<'caption'>) {\n  return (\n    <caption data-slot=\"table-caption\" className={cn('text-muted-foreground mt-4 text-sm', className)} {...props} />\n  )\n}\n\nexport { Table, TableHeader, TableBody, TableFooter, TableHead, TableRow, TableCell, TableCaption }\n",
      "type": "registry:ui",
      "target": "components/ui/table.tsx"
    },
    {
      "path": "table/table.types.ts",
      "content": "export interface DuckTableType<T> {\n  // Listeners\n  onUpdate(fn: () => void): () => void\n\n  // Data management\n  getRawData(): DuckTableRow<T>[]\n  setData(data: DuckTableRow<T>[]): void\n\n  // Pagination\n  setPageSize(size: number): void\n  setPage(page: number): void\n  nextPage(): void\n  lastPage(): void\n  prevPage(): void\n  firstPage(): void\n  getPage(): DuckTableRow<T>[]\n  getTotalPages(): number\n\n  // Filtering & Sorting\n  setFilters(filters: DuckTableFilterFn<T>[]): void\n  setSort(sort: DuckTableColumnSort<T>[]): void\n  getQuery(): string\n  setQuery(query: string): void\n\n  // Selection & Expansion\n  toggleSelect(id: string): void\n  toggleExpand(id: string): void\n  getSelectedRows(): DuckTableRow<T>[]\n  getExpandedRows(): DuckTableRow<T>[]\n\n  // Column visibility\n  toggleColumnVisibility(column: keyof T): void\n  isColumnVisible(column: keyof T): boolean\n  getVisibleColumns(): (keyof T)[]\n\n  // Export\n  exportCSV(): string\n  exportJSON(): string\n}\n\nexport type DuckTableRow<T> = T & { id: string }\n\nexport type DuckTableSortDirection = 'asc' | 'desc'\n\nexport interface DuckTableColumnSort<T> {\n  column: keyof T\n  direction: DuckTableSortDirection\n}\n\nexport type DuckTableFilterFn<T> = (row: DuckTableRow<T>) => boolean\n\nexport interface DuckTableOptions<T> {\n  data: DuckTableRow<T>[]\n  pageSize?: number\n  initialSort?: DuckTableColumnSort<T>[]\n}\n\nexport type DuckTableChangeKey =\n  | 'page'\n  | 'sort'\n  | 'filter'\n  | 'data'\n  | 'selection'\n  | 'expansion'\n  | 'columnVisibility'\n  | 'all'\nexport type Listener = (key: DuckTableChangeKey) => void\n",
      "type": "registry:ui",
      "target": "components/ui/table.types.ts"
    }
  ],
  "source": "/registry-ui-duckui/src/table"
}