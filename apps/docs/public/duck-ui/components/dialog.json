{
  "name": "dialog",
  "type": "registry:ui",
  "dependencies": [
    "@gentleduck/aria-feather"
  ],
  "registryDependencies": [],
  "root_folder": "dialog",
  "files": [
    {
      "path": "dialog/dialog.tsx",
      "content": "import DialogPrimitive, { useDialogContext } from '@gentleduck/aria-feather/dialog'\nimport { cn } from '@gentleduck/libs/cn'\nimport { AnimDialogModalVariants, AnimDialogVariants, AnimVariants } from '@gentleduck/motion/anim'\nimport { X } from 'lucide-react'\nimport type React from 'react'\nimport { Button } from '../button'\nimport type { DialogContentProps } from './dialog.types'\n\nfunction Dialog({ closeButton = true, ...props }: React.ComponentPropsWithoutRef<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root closeButton={closeButton} {...props} />\n}\n\nfunction DialogTrigger({\n  children,\n  ...props\n}: Omit<React.ComponentPropsWithoutRef<typeof DialogPrimitive.Trigger>, 'size' | 'asChild'> &\n  Omit<React.ComponentPropsWithoutRef<typeof Button>, 'asChild'>) {\n  return (\n    <DialogPrimitive.Trigger asChild>\n      <Button {...props}>{children}</Button>\n    </DialogPrimitive.Trigger>\n  )\n}\n\nfunction DialogCloseX({\n  ref,\n  size = 16,\n  children,\n  className,\n  ...props\n}: React.HTMLProps<HTMLButtonElement> & {\n  size?: number\n}): React.JSX.Element {\n  const { onOpenChange } = useDialogContext()\n\n  return (\n    <button\n      {...props}\n      ref={ref}\n      type=\"button\"\n      aria-label=\"close\"\n      className={cn(\n        'absolute end-3 top-3 size-4 cursor-pointer rounded text-accent-foreground opacity-70 transition-all hover:opacity-100',\n        className,\n      )}\n      onClick={() => onOpenChange?.(false)}>\n      {children ?? <X aria-hidden size={size} />}\n    </button>\n  )\n}\n\n/**\n * DialogContent component renders the content of a dialog.\n * It supports additional class names and props to customize the\n * appearance and behavior of the content. The component uses\n * a flexbox layout to arrange its children in a vertical column\n * and applies responsive text alignment.\n *\n * @param {DialogContentProps} props - The properties passed to the component.\n * @param {React.RefObject<HTMLDivElement>} [props.ref] - The ref to be forwarded to the component.\n *\n * @returns {React.JSX.Element} The rendered DialogContent component.\n */\nfunction DialogContent({\n  children,\n  className,\n  renderOnce = false,\n  overlay = 'default',\n  closedby = 'any',\n  animation = 'default',\n  ...props\n}: DialogContentProps): React.JSX.Element {\n  return (\n    <DialogPrimitive.Content\n      dialogClose={DialogCloseX}\n      className={cn(\n        AnimVariants({ overlay: overlay }),\n        AnimDialogVariants({ animation: animation }),\n        AnimDialogModalVariants(),\n        className,\n        'overflow-hidden',\n      )}\n      {...props}>\n      <div className=\"flex flex-col gap-4\">{children}</div>\n    </DialogPrimitive.Content>\n  )\n}\n\n/**\n * DialogHeader component renders a header section for a dialog.\n * It supports additional class names and props to customize the\n * appearance and behavior of the header. The component uses a\n * flexbox layout to arrange its children in a vertical column\n * and applies responsive text alignment.\n *\n * @param {React.HTMLProps<HTMLDivElement>} props - The properties passed to the component.\n * @param {React.RefObject<HTMLDivElement>} [props.ref] - The ref to be forwarded to the component.\n *\n * @returns {React.JSX.Element} The rendered DialogHeader component.\n */\nfunction DialogHeader({ className, ref, ...props }: React.HTMLProps<HTMLDivElement>): React.JSX.Element {\n  return <div ref={ref} className={cn('flex flex-col gap-1.5 text-left rtl:text-right', className)} {...props} />\n}\n\n/**\n * DialogFooter component renders a footer section for a dialog.\n * It supports additional class names and props to customize the\n * appearance and behavior of the footer. The component uses a\n * flexbox layout to arrange its children in a column on small\n * screens and in a row with space between items on larger screens.\n *\n * @param {React.HTMLProps<HTMLDivElement>} props - The properties passed to the component.\n * @param {React.RefObject<HTMLDivElement>} [props.ref] - The ref to be forwarded to the component.\n *\n * @returns {React.JSX.Element} The rendered DialogFooter component.\n */\nfunction DialogFooter({ className, ref, ...props }: React.HTMLProps<HTMLDivElement>): React.JSX.Element {\n  return (\n    <div ref={ref} className={cn(`flex flex-col-reverse gap-2 sm:flex-row sm:justify-end`, className)} {...props} />\n  )\n}\n\n/**\n * `DialogTitle` is a React component that forwards its ref to the `DialogTitle` component.\n * It accepts all props that `DialogTitle` accepts, along with an optional `className` prop\n * to customize its styling.\n *\n * @param {React.HTMLProps<HTMLHeadingElement>} props - The properties passed to the component.\n * @param {React.RefObject<HTMLHeadingElement>} [props.ref] - A ref that will be forwarded to the `DialogTitle` component.\n *\n * @returns {React.JSX.Element} The rendered `DialogTitle` component with forwarded ref and applied props.\n */\nfunction DialogTitle({ className, ref, ...props }: React.HTMLProps<HTMLHeadingElement>): React.JSX.Element {\n  return <h2 ref={ref} className={cn('font-semibold text-lg leading-none tracking-tight', className)} {...props} />\n}\n\n/**\n * `DialogDescription` is a React component that forwards its ref to the `DialogDescription` component.\n * It applies additional class names to style the description text.\n *\n * @param {React.HTMLProps<HTMLParagraphElement>} props - The properties passed to the component.\n * @param {React.RefObject<HTMLParagraphElement>} [props.ref] - The ref to be forwarded to the `DialogDescription` component.\n *\n * @returns {React.JSX.Element} The rendered `DialogDescription` component with forwarded ref and applied class names.\n */\nconst DialogDescription = ({ className, ref, ...props }: React.HTMLProps<HTMLParagraphElement>): React.JSX.Element => (\n  <p ref={ref} className={cn('text-muted-foreground text-sm', className)} {...props} />\n)\n\nconst DialogClose = DialogTrigger\n\nexport { Dialog, DialogTrigger, DialogContent, DialogHeader, DialogFooter, DialogTitle, DialogDescription, DialogClose }\n",
      "type": "registry:ui",
      "target": "components/ui/dialog.tsx"
    },
    {
      "path": "dialog/dialog.types.ts",
      "content": "import type { AnimDialogVariants, AnimVariants } from '@gentleduck/motion/anim'\nimport type { VariantProps } from '@gentleduck/variants'\nimport type {\n  Dialog,\n  DialogClose,\n  DialogCloseProps,\n  DialogContent,\n  DialogDescription,\n  DialogTitle,\n  DialogTrigger,\n} from '@radix-ui/react-dialog'\nimport type { UseDuckAlertReturnType } from '../alert-dialog/alert-dialog.types'\nimport type { DialogFooter, DialogHeader } from './dialog'\n\nexport interface DialogContextType {\n  open: boolean\n  onOpenChange: (open: boolean) => void\n  ref: React.RefObject<HTMLDialogElement | null>\n}\n\nexport type DialogProps = {\n  children: React.ReactNode\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}\n\nexport interface DialogContentProps\n  extends React.HTMLProps<HTMLDialogElement>,\n    VariantProps<typeof AnimVariants>,\n    VariantProps<typeof AnimDialogVariants> {\n  renderOnce?: boolean\n  sideOffset?: number\n  closedby?: 'any' | 'closerequest' | 'none'\n}\n\n/**\n * DialogResponsiveProps\n */\nexport interface DialogResponsiveProps extends React.ComponentPropsWithoutRef<typeof Dialog> {}\n\n/**\n * DialogTriggerResponsiveProps\n */\nexport interface DialogTriggerResponsiveProps extends React.ComponentPropsWithoutRef<typeof DialogTrigger> {}\n\n/**\n * DialogContentResponsiveProps\n */\nexport interface DialogContentResponsiveProps extends React.ComponentPropsWithoutRef<typeof DialogContent> {}\n\n/**\n * DialogHeaderResponsiveProps\n */\nexport interface DialogHeaderResponsiveProps extends React.ComponentPropsWithoutRef<typeof DialogHeader> {}\n\n/**\n * DialogFooterResponsiveProps\n */\nexport interface DialogFooterResponsiveProps extends React.ComponentPropsWithoutRef<typeof DialogFooter> {}\n\n/**\n * DialogTitleResponsiveProps\n */\nexport interface DialogTitleResponsiveProps extends React.ComponentPropsWithoutRef<typeof DialogTitle> {}\n\n/**\n * DialogDescriptionResponsiveProps\n */\nexport interface DialogDescriptionResponsiveProps extends React.ComponentPropsWithoutRef<typeof DialogDescription> {}\n\n/**\n * DialogCloseResponsiveProps\n */\nexport interface DialogCloseResponsiveProps extends React.ComponentPropsWithoutRef<typeof DialogClose> {}\n\n/**\n * DialogWrapper Props\n */\nexport interface DialogWrapperProps extends DialogResponsiveProps {\n  trigger?: DialogTriggerResponsiveProps\n  content: DialogContentResponsiveProps & {\n    _header?: DialogHeaderResponsiveProps & {\n      _title?: DialogTitleResponsiveProps\n      _description?: DialogDescriptionResponsiveProps\n    }\n    _footer?: DialogFooterResponsiveProps & {\n      _cancel?: DialogCloseProps\n      _submit?: React.HTMLProps<HTMLDivElement>\n    }\n  }\n  duckHook?: UseDuckAlertReturnType\n}\n",
      "type": "registry:ui",
      "target": "components/ui/dialog.types.ts"
    },
    {
      "path": "dialog/index.ts",
      "content": "export * from './dialog'\nexport * from './dialog.types'\n",
      "type": "registry:ui",
      "target": "components/ui/index.ts"
    }
  ],
  "source": "/registry-ui-duckui/src/dialog"
}