{
  "name": "accordion",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-accordion"
  ],
  "registryDependencies": [],
  "root_folder": "accordion",
  "files": [
    {
      "path": "accordion/__accordion.tsx",
      "content": "'use client'\n\nimport * as React from 'react'\nimport { ChevronDown } from 'lucide-react'\n\nimport { cn } from '@gentleduck/libs/cn'\nimport { AnimVariants } from '@gentleduck/motion/anim'\n\nconst AccordionContext = React.createContext<{\n  value?: string\n  onValueChange?: (value: string) => void\n  wrapperRef: React.RefObject<HTMLDivElement | null>\n} | null>(null)\n\nfunction Accordion({\n  className,\n  children,\n  defaultValue,\n  ref,\n  type = 'single',\n  value,\n  collapsible = true,\n  onValueChange,\n  ...props\n}: Omit<React.HTMLProps<HTMLDivElement>, 'value'> & {\n  collapsible?: boolean\n  type?: 'single' | 'multiple'\n  defaultValue?: string\n  value?: string\n  onValueChange?: (value: string) => void\n}) {\n  const wrapperRef = React.useRef<HTMLDivElement | null>(null)\n  const itemsRef = React.useRef<HTMLDetailsElement[]>([])\n\n  React.useEffect(() => {\n    itemsRef.current = Array.from(\n      wrapperRef.current?.querySelectorAll('[duck-accordion-item]') as never as HTMLDetailsElement[],\n    )\n  }, [])\n\n  React.useEffect(() => {\n    if (defaultValue) {\n      onValueChange?.(defaultValue)\n    }\n    function setOpen(value: boolean, trigger?: HTMLDivElement, content?: HTMLDivElement) {\n      trigger?.setAttribute('data-open', String(value))\n      content?.setAttribute('data-open', String(value))\n    }\n\n    for (let i = 0; i < itemsRef.current.length; i++) {\n      const item = itemsRef.current[i] as HTMLDetailsElement\n      const content = item.querySelector('[duck-accordion-content]') as HTMLDivElement\n      const trigger = item.querySelector('[duck-accordion-trigger]') as HTMLDivElement\n\n      if (item.id === defaultValue) {\n        item.open = true\n        setOpen(true, trigger, content)\n      }\n\n      trigger.addEventListener('click', () => {\n        if (type === 'single') {\n          for (let i = 0; i < itemsRef.current.length; i++) {\n            const _item = itemsRef.current[i] as HTMLDetailsElement\n            const content = _item.querySelector('[duck-accordion-content]') as HTMLDivElement\n            const trigger = _item.querySelector('[duck-accordion-trigger]') as HTMLDivElement\n\n            if (!collapsible) {\n              _item.open = false\n              setOpen(false, trigger, content)\n            }\n\n            if (_item.id === item.id) {\n              _item.open = item.open\n              setOpen(!item.open, trigger, content)\n            }\n          }\n        } else {\n        }\n        if (!collapsible) item.open = false\n        setOpen(!item.open, trigger, content)\n        onValueChange?.(item.id)\n      })\n    }\n  }, [defaultValue, onValueChange])\n\n  return (\n    <AccordionContext.Provider\n      value={{\n        value,\n        onValueChange,\n        wrapperRef,\n      }}>\n      <div className={cn('w-[400px] [interpolate-size:allow-keywords]')} {...props} ref={wrapperRef}>\n        {children}\n      </div>\n    </AccordionContext.Provider>\n  )\n}\n\nfunction AccordionItem({\n  className,\n  ref,\n  value,\n  ...props\n}: React.HTMLProps<HTMLDetailsElement> & {\n  value?: string\n}) {\n  return (\n    <details\n      ref={ref}\n      id={value}\n      aria-labelledby={value}\n      className={cn(\n        'group overflow-hidden border-border border-b',\n        '[&::details-content]:h-0 [&::details-content]:transform-gpu [&::details-content]:transition-all [&::details-content]:transition-discrete [&::details-content]:duration-250 [&::details-content]:ease-(--duck-motion-ease) [&::details-content]:will-change-[height] open:[&::details-content]:h-auto',\n        AnimVariants({ overlay: 'nothing' }),\n        className,\n      )}\n      {...props}\n      duck-accordion-item=\"\"\n    />\n  )\n}\n\nfunction AccordionTrigger({\n  className,\n  children,\n  icon,\n  value,\n  ref,\n  ...props\n}: React.HTMLProps<HTMLMapElement> & {\n  icon?: React.ReactNode\n  value?: string\n}) {\n  return (\n    <summary\n      id={value}\n      aria-controls={value}\n      aria-describedby={value}\n      ref={ref}\n      className={cn(\n        'flex flex-1 items-center justify-between whitespace-nowrap py-4 font-medium font-medium text-sm ring-offset-background transition-all transition-colors hover:underline focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 [&[data-open=true]_svg]:rotate-180',\n        className,\n      )}\n      {...props}\n      duck-accordion-trigger=\"\">\n      {children}\n      <span className={cn('[&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:transition-transform [&>svg]:duration-200')}>\n        {icon ? icon : <ChevronDown className=\"group-open:rotate-180\" />}\n      </span>\n    </summary>\n  )\n}\n\nconst AccordionContent = ({ className, children, ref, ...props }: React.HTMLProps<HTMLDivElement>) => (\n  <div className={cn('overflow-hidden pt-0 pb-4 text-sm', className)} duck-accordion-content=\"\" ref={ref} {...props}>\n    {children}\n  </div>\n)\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n",
      "type": "registry:ui",
      "target": "components/ui/__accordion.tsx"
    },
    {
      "path": "accordion/_accordion.tsx",
      "content": "'use client'\n\nimport * as React from 'react'\nimport * as AccordionPrimitive from '@radix-ui/react-accordion'\nimport { ChevronDown } from 'lucide-react'\n\nimport { cn } from '@gentleduck/libs/cn'\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item ref={ref} className={cn('border-b', className)} {...props} />\n))\nAccordionItem.displayName = 'AccordionItem'\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger> & {\n    icon?: React.ReactNode\n  }\n>(({ className, children, icon, ...props }, ref) => {\n  return (\n    <AccordionPrimitive.Header className=\"flex\">\n      <AccordionPrimitive.Trigger\n        ref={ref}\n        className={cn(\n          'flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180',\n          className,\n        )}\n        {...props}>\n        {children}\n        <span className={cn('[&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:transition-transform [&>svg]:duration-200')}>\n          {icon ? icon : <ChevronDown />}\n        </span>\n      </AccordionPrimitive.Trigger>\n    </AccordionPrimitive.Header>\n  )\n})\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}>\n    <div className={cn('pt-0 pb-4', className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n",
      "type": "registry:ui",
      "target": "components/ui/_accordion.tsx"
    },
    {
      "path": "accordion/accordion.tsx",
      "content": "'use client'\n\nimport * as React from 'react'\nimport { ChevronDown } from 'lucide-react'\n\nimport { cn } from '@gentleduck/libs/cn'\nimport { AnimVariants } from '@gentleduck/motion/anim'\n\nconst AccordionContext = React.createContext<{\n  value?: string\n  onValueChange?: (value: string) => void\n  wrapperRef: React.RefObject<HTMLDivElement | null>\n} | null>(null)\n\nfunction Accordion({\n  className,\n  children,\n  defaultValue,\n  ref,\n  type = 'single',\n  value,\n  collapsible = true,\n  onValueChange,\n  ...props\n}: Omit<React.HTMLProps<HTMLDivElement>, 'value'> & {\n  collapsible?: boolean\n  type?: 'single' | 'multiple'\n  defaultValue?: string\n  value?: string\n  onValueChange?: (value: string) => void\n}) {\n  const wrapperRef = React.useRef<HTMLDivElement | null>(null)\n  const itemsRef = React.useRef<HTMLDetailsElement[]>([])\n\n  React.useEffect(() => {\n    itemsRef.current = Array.from(\n      wrapperRef.current?.querySelectorAll('[duck-accordion-item]') as never as HTMLDetailsElement[],\n    )\n  }, [])\n\n  React.useEffect(() => {\n    if (defaultValue) {\n      onValueChange?.(defaultValue)\n    }\n    function setOpen(value: boolean, trigger?: HTMLDivElement, content?: HTMLDivElement) {\n      trigger?.setAttribute('data-open', String(value))\n      content?.setAttribute('data-open', String(value))\n    }\n\n    for (let i = 0; i < itemsRef.current.length; i++) {\n      const item = itemsRef.current[i] as HTMLDetailsElement\n      const content = item.querySelector('[duck-accordion-content]') as HTMLDivElement\n      const trigger = item.querySelector('[duck-accordion-trigger]') as HTMLDivElement\n\n      if (item.id === defaultValue) {\n        item.open = true\n        setOpen(true, trigger, content)\n      }\n\n      trigger.addEventListener('click', () => {\n        if (type === 'single') {\n          console.log(itemsRef.current)\n          for (let i = 0; i < itemsRef.current.length; i++) {\n            const _item = itemsRef.current[i] as HTMLDetailsElement\n            const content = _item.querySelector('[duck-accordion-content]') as HTMLDivElement\n            const trigger = _item.querySelector('[duck-accordion-trigger]') as HTMLDivElement\n\n            if (!collapsible) {\n              _item.open = false\n              setOpen(false, trigger, content)\n            }\n\n            if (_item.id === item.id) {\n              _item.open = item.open\n              setOpen(!item.open, trigger, content)\n            }\n          }\n        } else {\n        }\n        if (!collapsible) item.open = false\n        setOpen(!item.open, trigger, content)\n        onValueChange?.(item.id)\n      })\n    }\n  }, [defaultValue, onValueChange])\n\n  return (\n    <AccordionContext.Provider\n      value={{\n        value,\n        onValueChange,\n        wrapperRef,\n      }}>\n      <div className={cn('w-[400px] [interpolate-size:allow-keywords]')} {...props} ref={wrapperRef}>\n        {children}\n      </div>\n    </AccordionContext.Provider>\n  )\n}\n\nfunction AccordionItem({\n  className,\n  ref,\n  value,\n  ...props\n}: React.HTMLProps<HTMLDetailsElement> & {\n  value?: string\n}) {\n  return (\n    <details\n      ref={ref}\n      id={value}\n      aria-labelledby={value}\n      className={cn(\n        'group overflow-hidden border-border border-b',\n        '[&::details-content]:h-0 [&::details-content]:transform-gpu [&::details-content]:transition-all [&::details-content]:transition-discrete [&::details-content]:duration-250 [&::details-content]:ease-(--duck-motion-ease) [&::details-content]:will-change-[height] open:[&::details-content]:h-auto',\n        AnimVariants({ overlay: 'nothing' }),\n        className,\n      )}\n      {...props}\n      duck-accordion-item=\"\"\n    />\n  )\n}\n\nfunction AccordionTrigger({\n  className,\n  children,\n  icon,\n  value,\n  ref,\n  ...props\n}: React.HTMLProps<HTMLMapElement> & {\n  icon?: React.ReactNode\n  value?: string\n}) {\n  return (\n    <summary\n      id={value}\n      aria-controls={value}\n      aria-describedby={value}\n      ref={ref}\n      className={cn(\n        'flex flex-1 items-center justify-between whitespace-nowrap py-4 font-medium font-medium text-sm ring-offset-background transition-all transition-colors hover:underline focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 [&[data-open=true]_svg]:rotate-180',\n        className,\n      )}\n      {...props}\n      duck-accordion-trigger=\"\">\n      {children}\n      <span className={cn('[&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:transition-transform [&>svg]:duration-200')}>\n        {icon ? icon : <ChevronDown className=\"group-open:rotate-180\" />}\n      </span>\n    </summary>\n  )\n}\n\nconst AccordionContent = ({ className, children, ref, ...props }: React.HTMLProps<HTMLDivElement>) => (\n  <div className={cn('overflow-hidden pt-0 pb-4 text-sm', className)} duck-accordion-content=\"\" ref={ref} {...props}>\n    {children}\n  </div>\n)\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n",
      "type": "registry:ui",
      "target": "components/ui/accordion.tsx"
    },
    {
      "path": "accordion/index.ts",
      "content": "export * from './accordion'\n",
      "type": "registry:ui",
      "target": "components/ui/index.ts"
    }
  ],
  "source": "/registry-ui-duckui/src/accordion"
}